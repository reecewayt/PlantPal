/*
 * PlantPal ESP32 - MQTT Subscription Test
 * This example connects to a HiveMQ MQTT broker, subscribes to a test topic,
 * and publishes demo soil moisture telemetry every 60 seconds. This was intended to
 * test MQTT functionality and ensure compatibility with the HiveMQ Google Pub/Sub extension.
 */

#include <WiFi.h>
#include <MQTT.h>
#include "config.h"
#include "secrets.h"
#include "mqtt_service.h"


const String TAG = "MAIN";


WiFiClient net;
MQTTClient client;

// Demo publish interval (ms)
const unsigned long DEMO_PUBLISH_INTERVAL_MS = 60000UL; // 60s
unsigned long _lastPublishMs = 0;
// Demo payload will be generated by formatMoistureTopicPayload()

void connect() {
  DEBUG_LOG(TAG, "Checking WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    DEBUG_LOG(TAG, ".");
    delay(1000);
  }

  DEBUG_LOG(TAG, String("\nConnecting to MQTT broker at ") + MQTT_BROKER_HOST + ":" + String(MQTT_BROKER_PORT) + "...");

  while (!client.connect(MQTT_CLIENT_ID)) {
    DEBUG_LOG(TAG, ".");
    delay(1000);
  }

  DEBUG_LOG(TAG, "\nMQTT connected!");

  client.subscribe(SUB_MOISTURE_TOPIC);
  DEBUG_LOG(TAG, String("Subscribed to: ") + SUB_MOISTURE_TOPIC);
  client.subscribe(SUB_WATER_TOPIC);
  DEBUG_LOG(TAG, String("Subscribed to: ") + SUB_WATER_TOPIC);

}

void setup() {
  Serial.begin(SERIAL_BAUD_RATE);
  delay(2000);

  DEBUG_LOG(TAG, "\n=== PlantPal ESP32 MQTT Client===");
  DEBUG_LOG(TAG, "Config:");
  DEBUG_LOG(TAG, String("  WiFi SSID: ") + WIFI_SSID);
  DEBUG_LOG(TAG, String("  MQTT Broker: ") + MQTT_BROKER_HOST + ":" + String(MQTT_BROKER_PORT));
  DEBUG_LOG(TAG, "");

  // Connect to WiFi
  DEBUG_LOG(TAG, String("Connecting to WiFi: ") + WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  // Initialize MQTT client
  client.begin(MQTT_BROKER_HOST, MQTT_BROKER_PORT, net);
  client.onMessage(messageReceived);

  connect();

  DEBUG_LOG(TAG, "\n=== Setup Complete ===");
}

void loop() {
  client.loop();

  // Reconnect if connection lost
  if (!client.connected()) {
    DEBUG_LOG(TAG, "\nConnection lost! Reconnecting...");
    connect();
  }

  // Demo: publish soil telemetry every DEMO_PUBLISH_INTERVAL_MS while connected
  // TODO: Replace with real sensor data publishing, and update beyond demo purposes.
  if (client.connected()) {
    unsigned long now = millis();
    if (now - _lastPublishMs >= DEMO_PUBLISH_INTERVAL_MS) {
      _lastPublishMs = now;

      // Use configured telemetry topic from config.h if available
      const char* pubTopic = PUB_TELEMETRY_TOPIC;

      // Generate payload using helper function (demo values)
      String payload = formatMoistureTopicPayload(55.5, 1697666103000UL);

      DEBUG_LOG(TAG, String("Publishing demo telemetry to ") + pubTopic);
      DEBUG_LOG(TAG, String("Payload: ") + payload);

      bool ok = client.publish(pubTopic, payload.c_str());
      if (ok) {
        DEBUG_LOG(TAG, "Publish OK");
      } else {
        DEBUG_LOG(TAG, "Publish FAILED");
      }
    }
  }
}
